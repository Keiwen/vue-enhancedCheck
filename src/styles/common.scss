@use './variables.scss' as *;
@use './mixins.scss' as *;

.enhancedCheck-inline {
  display: inline;
  div {
    display: inline;
  }
}


.enhancedCheck {
  div {
    margin-top: 5px;
    margin-bottom: 5px;
  }
  label {
    @include labelBorderRadius($radiusDefault 0 0 $radiusDefault);
  }
  input[type="radio"], input[type="checkbox"] {
    display: none;
    & + label {
      @include colorLabel($colorDefault, $colorLdefault);
      border: 1px solid $colorDefault;
      color: inherit;
      position: relative;
      padding: $paddingVertical $paddingHorizontal $paddingVertical ($iconWidth + $paddingHorizontal);
      cursor: pointer;
      display: inline-block;
      &:before {
        position: absolute;
        display: block;
        top: 0;
        bottom: 0;
        left: 0;
        content: '';
        width: $iconWidth;
        background: $colorLdefault;
        text-align: center;
        line-height: 200%;
      }
    }
    &:disabled + label {
      cursor: not-allowed;
    }

    &:not(:checked) {
      & + label {
        &:hover {
          color: $colorDdefault;
          &:before {
            color: $colorDefault;
          }
        }
      }

    }

  }
  input[type="checkbox"] {
    &:not(:checked) + label:hover:before {
      content: $iconCheckbox;
    }
    &:checked + label:before {
      content: $iconCheckbox;
    }
  }
  input[type="radio"] {
    &:not(:checked) + label:hover:before {
      content: $iconRadio;
    }
    &:checked + label:before {
      content: $iconRadio;
    }
  }
  &.enhancedCheck-combine {
    input[type="checkbox"] {
      &:not(:checked) + label:hover:before {
        content: $iconCombine;
      }
      &:checked + label:before {
        content: $iconCombine;
      }
    }
  }

  &.enhancedCheck-primary {
    input[type="radio"], input[type="checkbox"] {
      @include colorLabel($colorPrimary, $colorDprimary);
    }
  }
  &.enhancedCheck-success {
    input[type="radio"], input[type="checkbox"] {
      @include colorLabel($colorSuccess, $colorDsuccess);
    }
  }
  &.enhancedCheck-warning {
    input[type="radio"], input[type="checkbox"] {
      @include colorLabel($colorWarning, $colorDwarning);
    }
  }
  &.enhancedCheck-danger {
    input[type="radio"], input[type="checkbox"] {
      @include colorLabel($colorDanger, $colorDdanger);
    }
  }

  &.enhancedCheck-animate {
    label {
      transition: color $transitionTime ease;
      -webkit-transition: color $transitionTime ease;
      &:before {
        transition: background-color $transitionTime ease;
        -webkit-transition: background-color $transitionTime ease;
      }
    }
  }

  &.enhancedCheck-rounded {
    label {
      @include labelBorderRadius($radiusRound);
    }
  }

}


.enhancedToggle {
  position: relative;
  overflow: hidden;
  vertical-align: middle;
  user-select: none;
  cursor: pointer;
  height: 2em;
  @include colorToggle($colorDefault, $colorDdefault);
  border: 1px solid $colorBorder;
  border-radius: $radiusDefault;
  margin-top: 5px;
  margin-bottom: 5px;

  &.enhancedCheck-rounded {
    border-radius: $radiusRound;
  }

  label {
    position: absolute;
    top: 0;
    bottom: 0;
    left: -100%;
    width: 200%;
    transition: left $transitionTimeToggle;
    -webkit-transition: left $transitionTimeToggle;
  }

  &.enhancedCheck-checked label {
    left: 0;
  }

  &.enhancedCheck-disabled label {
    cursor: not-allowed;
  }

  &.enhancedCheck-primary {
    @include colorToggle($colorPrimary, $colorDprimary);
  }
  &.enhancedCheck-success {
    @include colorToggle($colorSuccess, $colorDsuccess);
  }
  &.enhancedCheck-warning {
    @include colorToggle($colorWarning, $colorDwarning);
  }
  &.enhancedCheck-danger {
    @include colorToggle($colorDanger, $colorDdanger);
  }

  .enhancedToggle-label {
    padding: $paddingVertical $paddingHorizontal;
    transition: background $transitionTimeToggle;
    -webkit-transition: background $transitionTimeToggle;

    position: absolute;
    top: 0;
    bottom: 0;
    border-radius: $radiusDefault;
    color: inherit;
    box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
    text-align: center;

    &.labelOn {
      left: 0;
      padding-right: $paddingHorizontal + 30px;
    }
    &.labelOff {
      right: 0;
      padding-left: $paddingHorizontal + 30px;
    }
  }

  .enhancedToggle-switch {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50px;
    border: 1px solid $colorBorder;
    border-radius: $radiusDefault;
    width: 20px;
    z-index: 20;
    background: white;
  }

  &.enhancedCheck-rounded {
    .enhancedToggle-label,.enhancedToggle-switch {
      border-radius: $radiusRound;
    }
  }



}

